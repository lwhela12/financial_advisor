{"file":"/Users/lucaswhelan/financial_advisor/src/services/db.ts","mappings":";AAAA,cAAc;;;AAEd;;;;;;;;GAQG;AAEH,IAAI,UAAe,CAAC,CAAC,yDAAyD;AAE9E,SAAS,UAAU;IACjB,yEAAyE;IACzE,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE,CAAC;QACpC,OAAO;YACL,IAAI,EAAE;gBACJ,UAAU,EAAE,KAAK,IAAI,EAAE,CAAC,IAAI;gBAC5B,MAAM,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;aACnE;SACF,CAAC;IACJ,CAAC;IACD,IAAI,UAAU;QAAE,OAAO,UAAU,CAAC;IAElC,IAAI,CAAC;QACH,gGAAgG;QAChG,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACnD,UAAU,GAAG,IAAI,YAAY,EAAE,CAAC;IAClC,CAAC;IAAC,MAAM,CAAC;QACP,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;IAC1E,CAAC;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AAEY,QAAA,MAAM,GAAG,IAAI,KAAK,CAC7B,EAAE,EACF;IACE,GAAG,CAAC,OAAO,EAAE,IAAI;QACf,MAAM,MAAM,GAAG,UAAU,EAAE,CAAC;QAC5B,iCAAiC;QACjC,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;CACF,CACK,CAAC;AAET,kBAAe,cAAM,CAAC","names":[],"sources":["/Users/lucaswhelan/financial_advisor/src/services/db.ts"],"sourcesContent":["// @ts-nocheck\n\n/*\n * Lazy Prisma client singleton.\n *\n * The generated client may be missing in CI when tests are executed before\n * `prisma generate`.  Importing it unconditionally would therefore throw and\n * prevent the server from booting.  To work around this we create a proxy that\n * attempts to require the real client only when the first property is\n * accessed (i.e. the first time an endpoint actually needs the database).\n */\n\nlet realClient: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n\nfunction initPrisma() {\n  // In test mode, return a stub client to avoid real database interactions\n  if (process.env.NODE_ENV === 'test') {\n    return {\n      user: {\n        findUnique: async () => null,\n        create: async ({ data }) => ({ id: 'user-id', email: data.email }),\n      },\n    };\n  }\n  if (realClient) return realClient;\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires,import/no-extraneous-dependencies\n    const { PrismaClient } = require('@prisma/client');\n    realClient = new PrismaClient();\n  } catch {\n    throw new Error('Prisma client not generated â€“ run \"prisma generate\".');\n  }\n\n  return realClient;\n}\n\nexport const prisma = new Proxy(\n  {},\n  {\n    get(_target, prop) {\n      const client = initPrisma();\n      // @ts-ignore dynamic prop access\n      return client[prop];\n    },\n  },\n) as any;\n\nexport default prisma;\n"],"version":3}