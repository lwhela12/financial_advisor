2b1634dd0789ade4f1c3e8d8921de0bb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = statementsRoutes;
const s3_js_1 = require("../services/s3.js");
const queue_js_1 = require("../services/queue.js");
async function statementsRoutes(server) {
    server.post('/api/v1/statements/upload', {
        preHandler: [async (request, reply) => {
                try {
                    await request.jwtVerify();
                }
                catch (err) {
                    reply.code(401).send({ message: 'Unauthorized' });
                }
            }],
        schema: {
            consumes: ['multipart/form-data'],
            response: {
                202: {
                    type: 'object',
                    properties: {
                        jobId: { type: 'string' },
                    },
                    required: ['jobId'],
                },
            },
            required: [],
        },
        // 10MB file limit
        onRequest: async (request, reply) => {
            if (!request.isMultipart()) {
                reply.code(400).send({ message: 'Expected multipart/form-data' });
            }
        },
    }, async (request, reply) => {
        const user = request.user;
        const parts = request.parts();
        const part = await parts.next();
        if (!part || part.done || !part.value) {
            return reply.code(400).send({ message: 'File not provided' });
        }
        const file = part.value;
        if (file.type !== 'file') {
            return reply.code(400).send({ message: 'Invalid multipart field' });
        }
        const allowed = ['application/pdf', 'image/jpeg', 'image/png'];
        if (!allowed.includes(file.mimetype)) {
            return reply.code(400).send({ message: 'Unsupported mime type' });
        }
        const buffer = await file.toBuffer();
        if (buffer.length > 10 * 1024 * 1024) {
            return reply.code(400).send({ message: 'File exceeds 10MB limit' });
        }
        const objectKey = await (0, s3_js_1.uploadStatement)(user.sub, {
            buffer,
            filename: file.filename,
            mimetype: file.mimetype,
            size: buffer.length,
        });
        const job = await queue_js_1.ocrQueue.add('parse-statement', {
            userId: user.sub,
            s3Key: objectKey,
        });
        reply.code(202).send({ jobId: job.id });
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2x1Y2Fzd2hlbGFuL2ZpbmFuY2lhbF9hZHZpc29yL3NyYy9hcGkvc3RhdGVtZW50cy50cyIsIm1hcHBpbmdzIjoiOztBQUtBLG1DQXNFQztBQXpFRCw2Q0FBb0Q7QUFDcEQsbURBQWdEO0FBRWpDLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxNQUF1QjtJQUdwRSxNQUFNLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFO1FBQ3ZDLFVBQVUsRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQ3BDLElBQUksQ0FBQztvQkFDSCxNQUFNLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDNUIsQ0FBQztnQkFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO29CQUNiLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Z0JBQ3BELENBQUM7WUFDSCxDQUFDLENBQUM7UUFDRixNQUFNLEVBQUU7WUFDTixRQUFRLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztZQUNqQyxRQUFRLEVBQUU7Z0JBQ1IsR0FBRyxFQUFFO29CQUNILElBQUksRUFBRSxRQUFRO29CQUNkLFVBQVUsRUFBRTt3QkFDVixLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO3FCQUMxQjtvQkFDRCxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUM7aUJBQ3BCO2FBQ0Y7WUFDRCxRQUFRLEVBQUUsRUFBRTtTQUNiO1FBQ0Qsa0JBQWtCO1FBQ2xCLFNBQVMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztnQkFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsQ0FBQyxDQUFDO1lBQ3BFLENBQUM7UUFDSCxDQUFDO0tBQ0YsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQzFCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUF1QixDQUFDO1FBRTdDLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLElBQUksR0FBRyxNQUFNLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDdEMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUM7UUFDaEUsQ0FBQztRQUVELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFeEIsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQ3pCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsQ0FBQyxDQUFDO1FBQ3RFLENBQUM7UUFFRCxNQUFNLE9BQU8sR0FBRyxDQUFDLGlCQUFpQixFQUFFLFlBQVksRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUNyQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztRQUNwRSxDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFckMsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUM7WUFDckMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxDQUFDLENBQUM7UUFDdEUsQ0FBQztRQUVELE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBQSx1QkFBZSxFQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDaEQsTUFBTTtZQUNOLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNO1NBQ3BCLENBQUMsQ0FBQztRQUVILE1BQU0sR0FBRyxHQUFHLE1BQU0sbUJBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUU7WUFDaEQsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2hCLEtBQUssRUFBRSxTQUFTO1NBQ2pCLENBQUMsQ0FBQztRQUVILEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbHVjYXN3aGVsYW4vZmluYW5jaWFsX2Fkdmlzb3Ivc3JjL2FwaS9zdGF0ZW1lbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRmFzdGlmeUluc3RhbmNlIH0gZnJvbSAnZmFzdGlmeSc7XG5cbmltcG9ydCB7IHVwbG9hZFN0YXRlbWVudCB9IGZyb20gJy4uL3NlcnZpY2VzL3MzLmpzJztcbmltcG9ydCB7IG9jclF1ZXVlIH0gZnJvbSAnLi4vc2VydmljZXMvcXVldWUuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBzdGF0ZW1lbnRzUm91dGVzKHNlcnZlcjogRmFzdGlmeUluc3RhbmNlKSB7XG5cblxuICBzZXJ2ZXIucG9zdCgnL2FwaS92MS9zdGF0ZW1lbnRzL3VwbG9hZCcsIHtcbiAgICBwcmVIYW5kbGVyOiBbYXN5bmMgKHJlcXVlc3QsIHJlcGx5KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCByZXF1ZXN0Lmp3dFZlcmlmeSgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlcGx5LmNvZGUoNDAxKS5zZW5kKHsgbWVzc2FnZTogJ1VuYXV0aG9yaXplZCcgfSk7XG4gICAgICB9XG4gICAgfV0sXG4gICAgc2NoZW1hOiB7XG4gICAgICBjb25zdW1lczogWydtdWx0aXBhcnQvZm9ybS1kYXRhJ10sXG4gICAgICByZXNwb25zZToge1xuICAgICAgICAyMDI6IHtcbiAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBqb2JJZDogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVxdWlyZWQ6IFsnam9iSWQnXSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICByZXF1aXJlZDogW10sXG4gICAgfSxcbiAgICAvLyAxME1CIGZpbGUgbGltaXRcbiAgICBvblJlcXVlc3Q6IGFzeW5jIChyZXF1ZXN0LCByZXBseSkgPT4ge1xuICAgICAgaWYgKCFyZXF1ZXN0LmlzTXVsdGlwYXJ0KCkpIHtcbiAgICAgICAgcmVwbHkuY29kZSg0MDApLnNlbmQoeyBtZXNzYWdlOiAnRXhwZWN0ZWQgbXVsdGlwYXJ0L2Zvcm0tZGF0YScgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgfSwgYXN5bmMgKHJlcXVlc3QsIHJlcGx5KSA9PiB7XG4gICAgY29uc3QgdXNlciA9IHJlcXVlc3QudXNlciBhcyB7IHN1Yjogc3RyaW5nIH07XG5cbiAgICBjb25zdCBwYXJ0cyA9IHJlcXVlc3QucGFydHMoKTtcbiAgICBjb25zdCBwYXJ0ID0gYXdhaXQgcGFydHMubmV4dCgpO1xuICAgIGlmICghcGFydCB8fCBwYXJ0LmRvbmUgfHwgIXBhcnQudmFsdWUpIHtcbiAgICAgIHJldHVybiByZXBseS5jb2RlKDQwMCkuc2VuZCh7IG1lc3NhZ2U6ICdGaWxlIG5vdCBwcm92aWRlZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgZmlsZSA9IHBhcnQudmFsdWU7XG5cbiAgICBpZiAoZmlsZS50eXBlICE9PSAnZmlsZScpIHtcbiAgICAgIHJldHVybiByZXBseS5jb2RlKDQwMCkuc2VuZCh7IG1lc3NhZ2U6ICdJbnZhbGlkIG11bHRpcGFydCBmaWVsZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYWxsb3dlZCA9IFsnYXBwbGljYXRpb24vcGRmJywgJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvcG5nJ107XG4gICAgaWYgKCFhbGxvd2VkLmluY2x1ZGVzKGZpbGUubWltZXR5cGUpKSB7XG4gICAgICByZXR1cm4gcmVwbHkuY29kZSg0MDApLnNlbmQoeyBtZXNzYWdlOiAnVW5zdXBwb3J0ZWQgbWltZSB0eXBlJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBmaWxlLnRvQnVmZmVyKCk7XG5cbiAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDEwICogMTAyNCAqIDEwMjQpIHtcbiAgICAgIHJldHVybiByZXBseS5jb2RlKDQwMCkuc2VuZCh7IG1lc3NhZ2U6ICdGaWxlIGV4Y2VlZHMgMTBNQiBsaW1pdCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgb2JqZWN0S2V5ID0gYXdhaXQgdXBsb2FkU3RhdGVtZW50KHVzZXIuc3ViLCB7XG4gICAgICBidWZmZXIsXG4gICAgICBmaWxlbmFtZTogZmlsZS5maWxlbmFtZSxcbiAgICAgIG1pbWV0eXBlOiBmaWxlLm1pbWV0eXBlLFxuICAgICAgc2l6ZTogYnVmZmVyLmxlbmd0aCxcbiAgICB9KTtcblxuICAgIGNvbnN0IGpvYiA9IGF3YWl0IG9jclF1ZXVlLmFkZCgncGFyc2Utc3RhdGVtZW50Jywge1xuICAgICAgdXNlcklkOiB1c2VyLnN1YixcbiAgICAgIHMzS2V5OiBvYmplY3RLZXksXG4gICAgfSk7XG5cbiAgICByZXBseS5jb2RlKDIwMikuc2VuZCh7IGpvYklkOiBqb2IuaWQgfSk7XG4gIH0pO1xufVxuIl0sInZlcnNpb24iOjN9