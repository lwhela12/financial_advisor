4213c59b94e64579f33a4a372e51ff13
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildServer = buildServer;
const fastify_1 = __importDefault(require("fastify"));
const cookie_1 = __importDefault(require("@fastify/cookie"));
const jwt_1 = __importDefault(require("@fastify/jwt"));
const helmet_1 = __importDefault(require("@fastify/helmet"));
const swagger_1 = __importDefault(require("@fastify/swagger"));
const swagger_ui_1 = __importDefault(require("@fastify/swagger-ui"));
const multipart_1 = __importDefault(require("@fastify/multipart"));
const zod_1 = require("zod");
const dotenv_1 = __importDefault(require("dotenv"));
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const db_js_1 = __importDefault(require("./services/db.js"));
// Route modules
const statements_js_1 = __importDefault(require("./api/statements.js"));
const jobs_js_1 = __importDefault(require("./api/jobs.js"));
dotenv_1.default.config();
function createLogger() {
    const isProd = process.env.NODE_ENV === 'production';
    if (isProd)
        return true;
    return {
        transport: {
            target: 'pino-pretty',
            options: {
                translateTime: 'SYS:standard',
                ignore: 'pid,hostname',
            },
        },
    };
}
async function buildServer() {
    const server = (0, fastify_1.default)({
        logger: createLogger(),
    });
    // ---------------- Plugins ----------------
    await server.register(helmet_1.default);
    await server.register(cookie_1.default, {
        secret: process.env.COOKIE_SECRET || 'supersecret',
    });
    await server.register(jwt_1.default, {
        secret: process.env.JWT_SECRET || 'changeme',
        sign: { expiresIn: '60m' },
        cookie: {
            cookieName: 'refresh',
            signed: false,
        },
    });
    await server.register(swagger_1.default, {
        openapi: {
            info: { title: 'Pocket Financial Advisor API', version: '0.1.0' },
        },
    });
    await server.register(swagger_ui_1.default, { routePrefix: '/docs' });
    await server.register(multipart_1.default, {
        attachFieldsToBody: false,
        limits: {
            fileSize: 10 * 1024 * 1024, // 10MB
        },
    });
    // ---------------- Schemas ----------------
    const StatusSchema = {
        type: 'object',
        properties: {
            status: { type: 'string' },
        },
        required: ['status'],
    };
    server.get('/healthz', {
        schema: {
            tags: ['system'],
            response: { 200: StatusSchema },
        },
    }, async () => ({ status: 'ok' }));
    server.get('/readyz', {
        schema: {
            tags: ['system'],
            response: { 200: StatusSchema },
        },
    }, async () => ({ status: 'ready' }));
    // Auth routes ----------------------------
    // Using Zod for type inference but Fastify routes use JSON Schema for validation
    const SignupLoginSchema = zod_1.z.object({
        email: zod_1.z.string().email(),
        password: zod_1.z.string().min(8).max(128),
    });
    const SignupLoginBodySchema = {
        type: 'object',
        properties: {
            email: { type: 'string', format: 'email' },
            password: { type: 'string', minLength: 8, maxLength: 128 },
        },
        required: ['email', 'password'],
    };
    const TokenResponseSchema = {
        type: 'object',
        properties: {
            token: { type: 'string' },
        },
        required: ['token'],
    };
    server.post('/api/v1/auth/signup', {
        schema: {
            tags: ['auth'],
            body: SignupLoginBodySchema,
            response: { 200: TokenResponseSchema },
            required: [],
        },
    }, async (request, reply) => {
        const { email, password } = request.body;
        // Check if user already exists
        const existing = await db_js_1.default.user.findUnique({ where: { email } });
        if (existing) {
            return reply.code(409).send({ message: 'Email already registered' });
        }
        // Hash password
        const passwordHash = await bcryptjs_1.default.hash(password, 10);
        const user = await db_js_1.default.user.create({
            data: {
                email,
                passwordHash,
            },
        });
        const token = server.jwt.sign({ sub: user.id, email });
        reply.setCookie('refresh', token, {
            path: '/',
            httpOnly: true,
            sameSite: 'lax',
            secure: process.env.NODE_ENV === 'production',
            maxAge: 60 * 60,
        });
        return { token };
    });
    server.post('/api/v1/auth/login', {
        schema: {
            tags: ['auth'],
            body: SignupLoginBodySchema,
            response: { 200: TokenResponseSchema },
            required: [],
        },
    }, async (request, reply) => {
        const { email, password } = request.body;
        const user = await db_js_1.default.user.findUnique({ where: { email } });
        if (!user) {
            return reply.code(401).send({ message: 'Invalid credentials' });
        }
        const valid = await bcryptjs_1.default.compare(password, user.passwordHash);
        if (!valid) {
            return reply.code(401).send({ message: 'Invalid credentials' });
        }
        const token = server.jwt.sign({ sub: user.id, email: user.email });
        reply.setCookie('refresh', token, {
            path: '/',
            httpOnly: true,
            sameSite: 'lax',
            secure: process.env.NODE_ENV === 'production',
            maxAge: 60 * 60,
        });
        return { token };
    });
    server.get('/api/v1/auth/me', {
        preHandler: [async (request, reply) => {
                try {
                    await request.jwtVerify();
                }
                catch (err) {
                    return reply.send(err);
                }
            }],
        schema: {
            tags: ['auth'],
            response: {
                200: {
                    type: 'object',
                    properties: {
                        userId: { type: 'string' },
                        email: { type: 'string', format: 'email' },
                    },
                    required: ['userId', 'email'],
                },
            },
            required: [],
        },
    }, async (request) => {
        const { sub, email } = request.user;
        return { userId: sub, email };
    });
    // Domain routes
    await server.register(statements_js_1.default);
    await server.register(jobs_js_1.default);
    return server;
}
// If not in test mode, start server immediately
if (process.env.NODE_ENV !== 'test') {
    // Start the OCR worker
    Promise.resolve().then(() => __importStar(require('./services/worker.js'))).catch((err) => {
        console.error('Failed to start OCR worker:', err);
    });
    // Start the API server
    buildServer().then((server) => {
        const port = parseInt(process.env.PORT || '3000', 10);
        server.listen({ port, host: '0.0.0.0' })
            .catch((err) => {
            server.log.error(err);
            process.exit(1);
        });
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,