edcf5df986cdc7dfce7203667f0d32b3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = statementsRoutes;
const zod_1 = require("zod");
const s3_js_1 = require("../services/s3.js");
const queue_js_1 = require("../services/queue.js");
async function statementsRoutes(server) {
    server.post('/api/v1/statements/upload', {
        preHandler: [async (request, reply) => {
                try {
                    await request.jwtVerify();
                }
                catch (err) {
                    reply.code(401).send({ message: 'Unauthorized' });
                }
            }],
        schema: {
            consumes: ['multipart/form-data'],
            response: {
                202: zod_1.z.object({ jobId: zod_1.z.string() }),
            },
        },
        // 10MB file limit
        onRequest: async (request, reply) => {
            if (!request.isMultipart()) {
                reply.code(400).send({ message: 'Expected multipart/form-data' });
            }
        },
    }, async (request, reply) => {
        const user = request.user;
        const parts = request.parts();
        const part = await parts.next();
        if (!part || part.done || !part.value) {
            return reply.code(400).send({ message: 'File not provided' });
        }
        const file = part.value;
        if (file.type !== 'file') {
            return reply.code(400).send({ message: 'Invalid multipart field' });
        }
        const allowed = ['application/pdf', 'image/jpeg', 'image/png'];
        if (!allowed.includes(file.mimetype)) {
            return reply.code(400).send({ message: 'Unsupported mime type' });
        }
        const buffer = await file.toBuffer();
        if (buffer.length > 10 * 1024 * 1024) {
            return reply.code(400).send({ message: 'File exceeds 10MB limit' });
        }
        const objectKey = await (0, s3_js_1.uploadStatement)(user.sub, {
            buffer,
            filename: file.filename,
            mimetype: file.mimetype,
            size: buffer.length,
        });
        const job = await queue_js_1.ocrQueue.add('parse-statement', {
            userId: user.sub,
            s3Key: objectKey,
        });
        reply.code(202).send({ jobId: job.id });
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2x1Y2Fzd2hlbGFuL2ZpbmFuY2lhbF9hZHZpc29yL3NyYy9hcGkvc3RhdGVtZW50cy50cyIsIm1hcHBpbmdzIjoiOztBQUtBLG1DQStEQztBQW5FRCw2QkFBd0I7QUFDeEIsNkNBQW9EO0FBQ3BELG1EQUFnRDtBQUVqQyxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsTUFBdUI7SUFHcEUsTUFBTSxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRTtRQUN2QyxVQUFVLEVBQUUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUNwQyxJQUFJLENBQUM7b0JBQ0gsTUFBTSxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBQzVCLENBQUM7Z0JBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztvQkFDYixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO2dCQUNwRCxDQUFDO1lBQ0gsQ0FBQyxDQUFDO1FBQ0YsTUFBTSxFQUFFO1lBQ04sUUFBUSxFQUFFLENBQUMscUJBQXFCLENBQUM7WUFDakMsUUFBUSxFQUFFO2dCQUNSLEdBQUcsRUFBRSxPQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO2FBQ3JDO1NBQ0Y7UUFDRCxrQkFBa0I7UUFDbEIsU0FBUyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO2dCQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxDQUFDLENBQUM7WUFDcEUsQ0FBQztRQUNILENBQUM7S0FDRixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDMUIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQXVCLENBQUM7UUFFN0MsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLE1BQU0sSUFBSSxHQUFHLE1BQU0sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN0QyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBQztRQUNoRSxDQUFDO1FBRUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUV4QixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFLENBQUM7WUFDekIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxDQUFDLENBQUM7UUFDdEUsQ0FBQztRQUVELE1BQU0sT0FBTyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQ3JDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLENBQUM7UUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVyQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHLElBQUksR0FBRyxJQUFJLEVBQUUsQ0FBQztZQUNyQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLENBQUMsQ0FBQztRQUN0RSxDQUFDO1FBRUQsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFBLHVCQUFlLEVBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNoRCxNQUFNO1lBQ04sUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixJQUFJLEVBQUUsTUFBTSxDQUFDLE1BQU07U0FDcEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsTUFBTSxtQkFBUSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRTtZQUNoRCxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDaEIsS0FBSyxFQUFFLFNBQVM7U0FDakIsQ0FBQyxDQUFDO1FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWNhc3doZWxhbi9maW5hbmNpYWxfYWR2aXNvci9zcmMvYXBpL3N0YXRlbWVudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tICdmYXN0aWZ5JztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgdXBsb2FkU3RhdGVtZW50IH0gZnJvbSAnLi4vc2VydmljZXMvczMuanMnO1xuaW1wb3J0IHsgb2NyUXVldWUgfSBmcm9tICcuLi9zZXJ2aWNlcy9xdWV1ZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHN0YXRlbWVudHNSb3V0ZXMoc2VydmVyOiBGYXN0aWZ5SW5zdGFuY2UpIHtcblxuXG4gIHNlcnZlci5wb3N0KCcvYXBpL3YxL3N0YXRlbWVudHMvdXBsb2FkJywge1xuICAgIHByZUhhbmRsZXI6IFthc3luYyAocmVxdWVzdCwgcmVwbHkpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHJlcXVlc3Quand0VmVyaWZ5KCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVwbHkuY29kZSg0MDEpLnNlbmQoeyBtZXNzYWdlOiAnVW5hdXRob3JpemVkJyB9KTtcbiAgICAgIH1cbiAgICB9XSxcbiAgICBzY2hlbWE6IHtcbiAgICAgIGNvbnN1bWVzOiBbJ211bHRpcGFydC9mb3JtLWRhdGEnXSxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIDIwMjogei5vYmplY3QoeyBqb2JJZDogei5zdHJpbmcoKSB9KSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICAvLyAxME1CIGZpbGUgbGltaXRcbiAgICBvblJlcXVlc3Q6IGFzeW5jIChyZXF1ZXN0LCByZXBseSkgPT4ge1xuICAgICAgaWYgKCFyZXF1ZXN0LmlzTXVsdGlwYXJ0KCkpIHtcbiAgICAgICAgcmVwbHkuY29kZSg0MDApLnNlbmQoeyBtZXNzYWdlOiAnRXhwZWN0ZWQgbXVsdGlwYXJ0L2Zvcm0tZGF0YScgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgfSwgYXN5bmMgKHJlcXVlc3QsIHJlcGx5KSA9PiB7XG4gICAgY29uc3QgdXNlciA9IHJlcXVlc3QudXNlciBhcyB7IHN1Yjogc3RyaW5nIH07XG5cbiAgICBjb25zdCBwYXJ0cyA9IHJlcXVlc3QucGFydHMoKTtcbiAgICBjb25zdCBwYXJ0ID0gYXdhaXQgcGFydHMubmV4dCgpO1xuICAgIGlmICghcGFydCB8fCBwYXJ0LmRvbmUgfHwgIXBhcnQudmFsdWUpIHtcbiAgICAgIHJldHVybiByZXBseS5jb2RlKDQwMCkuc2VuZCh7IG1lc3NhZ2U6ICdGaWxlIG5vdCBwcm92aWRlZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgZmlsZSA9IHBhcnQudmFsdWU7XG5cbiAgICBpZiAoZmlsZS50eXBlICE9PSAnZmlsZScpIHtcbiAgICAgIHJldHVybiByZXBseS5jb2RlKDQwMCkuc2VuZCh7IG1lc3NhZ2U6ICdJbnZhbGlkIG11bHRpcGFydCBmaWVsZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYWxsb3dlZCA9IFsnYXBwbGljYXRpb24vcGRmJywgJ2ltYWdlL2pwZWcnLCAnaW1hZ2UvcG5nJ107XG4gICAgaWYgKCFhbGxvd2VkLmluY2x1ZGVzKGZpbGUubWltZXR5cGUpKSB7XG4gICAgICByZXR1cm4gcmVwbHkuY29kZSg0MDApLnNlbmQoeyBtZXNzYWdlOiAnVW5zdXBwb3J0ZWQgbWltZSB0eXBlJyB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBmaWxlLnRvQnVmZmVyKCk7XG5cbiAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDEwICogMTAyNCAqIDEwMjQpIHtcbiAgICAgIHJldHVybiByZXBseS5jb2RlKDQwMCkuc2VuZCh7IG1lc3NhZ2U6ICdGaWxlIGV4Y2VlZHMgMTBNQiBsaW1pdCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgb2JqZWN0S2V5ID0gYXdhaXQgdXBsb2FkU3RhdGVtZW50KHVzZXIuc3ViLCB7XG4gICAgICBidWZmZXIsXG4gICAgICBmaWxlbmFtZTogZmlsZS5maWxlbmFtZSxcbiAgICAgIG1pbWV0eXBlOiBmaWxlLm1pbWV0eXBlLFxuICAgICAgc2l6ZTogYnVmZmVyLmxlbmd0aCxcbiAgICB9KTtcblxuICAgIGNvbnN0IGpvYiA9IGF3YWl0IG9jclF1ZXVlLmFkZCgncGFyc2Utc3RhdGVtZW50Jywge1xuICAgICAgdXNlcklkOiB1c2VyLnN1YixcbiAgICAgIHMzS2V5OiBvYmplY3RLZXksXG4gICAgfSk7XG5cbiAgICByZXBseS5jb2RlKDIwMikuc2VuZCh7IGpvYklkOiBqb2IuaWQgfSk7XG4gIH0pO1xufVxuIl0sInZlcnNpb24iOjN9