c9fc57491d1f76c6bf1068f62a785b2f
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildServer = buildServer;
const fastify_1 = __importDefault(require("fastify"));
const cookie_1 = __importDefault(require("@fastify/cookie"));
const jwt_1 = __importDefault(require("@fastify/jwt"));
const helmet_1 = __importDefault(require("@fastify/helmet"));
const swagger_1 = __importDefault(require("@fastify/swagger"));
const swagger_ui_1 = __importDefault(require("@fastify/swagger-ui"));
const multipart_1 = __importDefault(require("@fastify/multipart"));
const zod_1 = require("zod");
const dotenv_1 = __importDefault(require("dotenv"));
// Route modules
const statements_js_1 = __importDefault(require("./api/statements.js"));
const jobs_js_1 = __importDefault(require("./api/jobs.js"));
dotenv_1.default.config();
function createLogger() {
    const isProd = process.env.NODE_ENV === 'production';
    if (isProd)
        return true;
    return {
        transport: {
            target: 'pino-pretty',
            options: {
                translateTime: 'SYS:standard',
                ignore: 'pid,hostname',
            },
        },
    };
}
async function buildServer() {
    const server = (0, fastify_1.default)({
        logger: createLogger(),
    });
    // ---------------- Plugins ----------------
    await server.register(helmet_1.default);
    await server.register(cookie_1.default, {
        secret: process.env.COOKIE_SECRET || 'supersecret',
    });
    await server.register(jwt_1.default, {
        secret: process.env.JWT_SECRET || 'changeme',
        sign: { expiresIn: '60m' },
        cookie: {
            cookieName: 'refresh',
            signed: false,
        },
    });
    await server.register(swagger_1.default, {
        openapi: {
            info: { title: 'Pocket Financial Advisor API', version: '0.1.0' },
        },
    });
    await server.register(swagger_ui_1.default, { routePrefix: '/docs' });
    await server.register(multipart_1.default, {
        attachFieldsToBody: false,
        limits: {
            fileSize: 10 * 1024 * 1024, // 10MB
        },
    });
    // ---------------- Schemas ----------------
    const StatusSchema = {
        type: 'object',
        properties: {
            status: { type: 'string' },
        },
        required: ['status'],
    };
    server.get('/healthz', {
        schema: {
            tags: ['system'],
            response: { 200: StatusSchema },
        },
    }, async () => ({ status: 'ok' }));
    server.get('/readyz', {
        schema: {
            tags: ['system'],
            response: { 200: StatusSchema },
        },
    }, async () => ({ status: 'ready' }));
    // Auth routes ----------------------------
    const SignupLoginSchema = zod_1.z.object({
        email: zod_1.z.string().email(),
        password: zod_1.z.string().min(8).max(128),
    });
    server.post('/api/v1/auth/signup', {
        schema: {
            tags: ['auth'],
            body: SignupLoginSchema,
            response: { 200: zod_1.z.object({ token: zod_1.z.string() }) },
        },
    }, async (request, reply) => {
        const { email, password } = request.body;
        // TODO: Persist user with Prisma, ensure unique email
        const userId = '1';
        const token = server.jwt.sign({ sub: userId, email });
        reply.setCookie('refresh', token, {
            path: '/',
            httpOnly: true,
            sameSite: 'lax',
            secure: process.env.NODE_ENV === 'production',
            maxAge: 60 * 60,
        });
        return { token };
    });
    server.post('/api/v1/auth/login', {
        schema: {
            tags: ['auth'],
            body: SignupLoginSchema,
            response: { 200: zod_1.z.object({ token: zod_1.z.string() }) },
        },
    }, async (request, reply) => {
        const { email, password } = request.body;
        // TODO: Verify credentials via Prisma
        const userId = '1';
        const token = server.jwt.sign({ sub: userId, email });
        reply.setCookie('refresh', token, {
            path: '/',
            httpOnly: true,
            sameSite: 'lax',
            secure: process.env.NODE_ENV === 'production',
            maxAge: 60 * 60,
        });
        return { token };
    });
    server.get('/api/v1/auth/me', {
        preHandler: [async (request, reply) => {
                try {
                    await request.jwtVerify();
                }
                catch (err) {
                    return reply.send(err);
                }
            }],
        schema: {
            tags: ['auth'],
            response: { 200: zod_1.z.object({ userId: zod_1.z.string(), email: zod_1.z.string().email() }) },
        },
    }, async (request) => {
        const { sub, email } = request.user;
        return { userId: sub, email };
    });
    // Domain routes
    await server.register(statements_js_1.default);
    await server.register(jobs_js_1.default);
    return server;
}
// If not in test mode, start server immediately
if (process.env.NODE_ENV !== 'test') {
    buildServer().then((server) => {
        const port = parseInt(process.env.PORT || '3000', 10);
        server.listen({ port, host: '0.0.0.0' })
            .catch((err) => {
            server.log.error(err);
            process.exit(1);
        });
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,