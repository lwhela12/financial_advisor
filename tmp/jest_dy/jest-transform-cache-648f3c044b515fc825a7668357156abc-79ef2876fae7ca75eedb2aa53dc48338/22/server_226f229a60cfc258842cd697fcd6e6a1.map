{"file":"/Users/lucaswhelan/financial_advisor/src/server.ts","mappings":"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","names":[],"sources":["/Users/lucaswhelan/financial_advisor/src/server.ts"],"sourcesContent":["import Fastify, { FastifyInstance } from 'fastify';\nimport cookie from '@fastify/cookie';\nimport jwt from '@fastify/jwt';\nimport helmet from '@fastify/helmet';\nimport swagger from '@fastify/swagger';\nimport swaggerUi from '@fastify/swagger-ui';\nimport multipart from '@fastify/multipart';\nimport { z } from 'zod';\nimport dotenv from 'dotenv';\n\n// Route modules\nimport statementsRoutes from './api/statements.js';\nimport jobsRoutes from './api/jobs.js';\n\ndotenv.config();\n\nfunction createLogger() {\n  const isProd = process.env.NODE_ENV === 'production';\n  if (isProd) return true;\n\n  return {\n    transport: {\n      target: 'pino-pretty',\n      options: {\n        translateTime: 'SYS:standard',\n        ignore: 'pid,hostname',\n      },\n    },\n  } as const;\n}\n\nexport async function buildServer(): Promise<FastifyInstance> {\n  const server: FastifyInstance = Fastify({\n    logger: createLogger(),\n  });\n\n  // ---------------- Plugins ----------------\n  await server.register(helmet);\n  await server.register(cookie, {\n    secret: process.env.COOKIE_SECRET || 'supersecret',\n  });\n\n  await server.register(jwt, {\n    secret: process.env.JWT_SECRET || 'changeme',\n    sign: { expiresIn: '60m' },\n    cookie: {\n      cookieName: 'refresh',\n      signed: false,\n    },\n  });\n\n  await server.register(swagger, {\n    openapi: {\n      info: { title: 'Pocket Financial Advisor API', version: '0.1.0' },\n    },\n  });\n\n  await server.register(swaggerUi, { routePrefix: '/docs' });\n\n  await server.register(multipart, {\n    attachFieldsToBody: false,\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB\n    },\n  });\n\n  // ---------------- Schemas ----------------\n  const StatusSchema = {\n    type: 'object',\n    properties: {\n      status: { type: 'string' },\n    },\n    required: ['status'],\n  } as const;\n\n  server.get('/healthz', {\n    schema: {\n      tags: ['system'],\n      response: { 200: StatusSchema },\n    },\n  }, async () => ({ status: 'ok' }));\n\n  server.get('/readyz', {\n    schema: {\n      tags: ['system'],\n      response: { 200: StatusSchema },\n    },\n  }, async () => ({ status: 'ready' }));\n\n  // Auth routes ----------------------------\n\n  // Using Zod for type inference but Fastify routes use JSON Schema for validation\n  const SignupLoginSchema = z.object({\n    email: z.string().email(),\n    password: z.string().min(8).max(128),\n  });\n\n  const SignupLoginBodySchema = {\n    type: 'object',\n    properties: {\n      email: { type: 'string', format: 'email' },\n      password: { type: 'string', minLength: 8, maxLength: 128 },\n    },\n    required: ['email', 'password'],\n  } as const;\n\n  const TokenResponseSchema = {\n    type: 'object',\n    properties: {\n      token: { type: 'string' },\n    },\n    required: ['token'],\n  } as const;\n\n  server.post('/api/v1/auth/signup', {\n    schema: {\n      tags: ['auth'],\n      body: SignupLoginBodySchema,\n      response: { 200: TokenResponseSchema },\n      required: [],\n    },\n  }, async (request, reply) => {\n    const { email, password } = request.body as z.infer<typeof SignupLoginSchema>;\n\n    // TODO: Persist user with Prisma, ensure unique email\n    const userId = '1';\n\n    const token = server.jwt.sign({ sub: userId, email });\n\n    reply.setCookie('refresh', token, {\n      path: '/',\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 60 * 60,\n    });\n\n    return { token };\n  });\n\n  server.post('/api/v1/auth/login', {\n    schema: {\n      tags: ['auth'],\n      body: SignupLoginBodySchema,\n      response: { 200: TokenResponseSchema },\n      required: [],\n    },\n  }, async (request, reply) => {\n    const { email, password } = request.body as z.infer<typeof SignupLoginSchema>;\n\n    // TODO: Verify credentials via Prisma\n    const userId = '1';\n\n    const token = server.jwt.sign({ sub: userId, email });\n\n    reply.setCookie('refresh', token, {\n      path: '/',\n      httpOnly: true,\n      sameSite: 'lax',\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 60 * 60,\n    });\n\n    return { token };\n  });\n\n  server.get('/api/v1/auth/me', {\n    preHandler: [async (request, reply) => {\n      try {\n        await request.jwtVerify();\n      } catch (err) {\n        return reply.send(err);\n      }\n    }],\n    schema: {\n      tags: ['auth'],\n      response: {\n        200: {\n          type: 'object',\n          properties: {\n            userId: { type: 'string' },\n            email: { type: 'string', format: 'email' },\n          },\n          required: ['userId', 'email'],\n        },\n      },\n      required: [],\n    },\n  }, async (request) => {\n    const { sub, email } = request.user as { sub: string; email: string };\n    return { userId: sub, email };\n  });\n\n  // Domain routes\n  await server.register(statementsRoutes);\n  await server.register(jobsRoutes);\n\n  return server;\n}\n\n// If not in test mode, start server immediately\nif (process.env.NODE_ENV !== 'test') {\n  buildServer().then((server) => {\n    const port = parseInt(process.env.PORT || '3000', 10);\n    server.listen({ port, host: '0.0.0.0' })\n      .catch((err) => {\n        server.log.error(err);\n        process.exit(1);\n      });\n  });\n}\n"],"version":3}