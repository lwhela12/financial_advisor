51ca9e69def5b3728a18ed93ea8fab36
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildServer = buildServer;
const fastify_1 = __importDefault(require("fastify"));
const cookie_1 = __importDefault(require("@fastify/cookie"));
const jwt_1 = __importDefault(require("@fastify/jwt"));
const helmet_1 = __importDefault(require("@fastify/helmet"));
const swagger_1 = __importDefault(require("@fastify/swagger"));
const swagger_ui_1 = __importDefault(require("@fastify/swagger-ui"));
const multipart_1 = __importDefault(require("@fastify/multipart"));
const zod_1 = require("zod");
const dotenv_1 = __importDefault(require("dotenv"));
// Route modules
const statements_js_1 = __importDefault(require("./api/statements.js"));
const jobs_js_1 = __importDefault(require("./api/jobs.js"));
dotenv_1.default.config();
function createLogger() {
    const isProd = process.env.NODE_ENV === 'production';
    if (isProd)
        return true;
    return {
        transport: {
            target: 'pino-pretty',
            options: {
                translateTime: 'SYS:standard',
                ignore: 'pid,hostname',
            },
        },
    };
}
async function buildServer() {
    const server = (0, fastify_1.default)({
        logger: createLogger(),
    });
    // ---------------- Plugins ----------------
    await server.register(helmet_1.default);
    await server.register(cookie_1.default, {
        secret: process.env.COOKIE_SECRET || 'supersecret',
    });
    await server.register(jwt_1.default, {
        secret: process.env.JWT_SECRET || 'changeme',
        sign: { expiresIn: '60m' },
        cookie: {
            cookieName: 'refresh',
            signed: false,
        },
    });
    await server.register(swagger_1.default, {
        openapi: {
            info: { title: 'Pocket Financial Advisor API', version: '0.1.0' },
        },
    });
    await server.register(swagger_ui_1.default, { routePrefix: '/docs' });
    await server.register(multipart_1.default, {
        attachFieldsToBody: false,
        limits: {
            fileSize: 10 * 1024 * 1024, // 10MB
        },
    });
    // ---------------- Schemas ----------------
    const StatusSchema = {
        type: 'object',
        properties: {
            status: { type: 'string' },
        },
        required: ['status'],
    };
    server.get('/healthz', {
        schema: {
            tags: ['system'],
            response: { 200: StatusSchema },
        },
    }, async () => ({ status: 'ok' }));
    server.get('/readyz', {
        schema: {
            tags: ['system'],
            response: { 200: StatusSchema },
        },
    }, async () => ({ status: 'ready' }));
    // Auth routes ----------------------------
    // Using Zod for type inference but Fastify routes use JSON Schema for validation
    const SignupLoginSchema = zod_1.z.object({
        email: zod_1.z.string().email(),
        password: zod_1.z.string().min(8).max(128),
    });
    const SignupLoginBodySchema = {
        type: 'object',
        properties: {
            email: { type: 'string', format: 'email' },
            password: { type: 'string', minLength: 8, maxLength: 128 },
        },
        required: ['email', 'password'],
    };
    const TokenResponseSchema = {
        type: 'object',
        properties: {
            token: { type: 'string' },
        },
        required: ['token'],
    };
    server.post('/api/v1/auth/signup', {
        schema: {
            tags: ['auth'],
            body: SignupLoginBodySchema,
            response: { 200: TokenResponseSchema },
            required: [],
        },
    }, async (request, reply) => {
        const { email, password } = request.body;
        // TODO: Persist user with Prisma, ensure unique email
        const userId = '1';
        const token = server.jwt.sign({ sub: userId, email });
        reply.setCookie('refresh', token, {
            path: '/',
            httpOnly: true,
            sameSite: 'lax',
            secure: process.env.NODE_ENV === 'production',
            maxAge: 60 * 60,
        });
        return { token };
    });
    server.post('/api/v1/auth/login', {
        schema: {
            tags: ['auth'],
            body: SignupLoginBodySchema,
            response: { 200: TokenResponseSchema },
            required: [],
        },
    }, async (request, reply) => {
        const { email, password } = request.body;
        // TODO: Verify credentials via Prisma
        const userId = '1';
        const token = server.jwt.sign({ sub: userId, email });
        reply.setCookie('refresh', token, {
            path: '/',
            httpOnly: true,
            sameSite: 'lax',
            secure: process.env.NODE_ENV === 'production',
            maxAge: 60 * 60,
        });
        return { token };
    });
    server.get('/api/v1/auth/me', {
        preHandler: [async (request, reply) => {
                try {
                    await request.jwtVerify();
                }
                catch (err) {
                    return reply.send(err);
                }
            }],
        schema: {
            tags: ['auth'],
            response: {
                200: {
                    type: 'object',
                    properties: {
                        userId: { type: 'string' },
                        email: { type: 'string', format: 'email' },
                    },
                    required: ['userId', 'email'],
                },
            },
            required: [],
        },
    }, async (request) => {
        const { sub, email } = request.user;
        return { userId: sub, email };
    });
    // Domain routes
    await server.register(statements_js_1.default);
    await server.register(jobs_js_1.default);
    return server;
}
// If not in test mode, start server immediately
if (process.env.NODE_ENV !== 'test') {
    buildServer().then((server) => {
        const port = parseInt(process.env.PORT || '3000', 10);
        server.listen({ port, host: '0.0.0.0' })
            .catch((err) => {
            server.log.error(err);
            process.exit(1);
        });
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RTtRQUNuQixNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFzQyxDQUFDO1FBQ3RFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsZ0JBQWdCO0lBQ2hCLE1BQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyx1QkFBZ0IsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxpQkFBVSxDQUFDLENBQUM7SUFFbEMsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELGdEQUFnRDtBQUNoRCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBRSxDQUFDO0lBQ3BDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQzVCLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7YUFDckMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDYixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0QixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWNhc3doZWxhbi9maW5hbmNpYWxfYWR2aXNvci9zcmMvc2VydmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBGYXN0aWZ5LCB7IEZhc3RpZnlJbnN0YW5jZSB9IGZyb20gJ2Zhc3RpZnknO1xuaW1wb3J0IGNvb2tpZSBmcm9tICdAZmFzdGlmeS9jb29raWUnO1xuaW1wb3J0IGp3dCBmcm9tICdAZmFzdGlmeS9qd3QnO1xuaW1wb3J0IGhlbG1ldCBmcm9tICdAZmFzdGlmeS9oZWxtZXQnO1xuaW1wb3J0IHN3YWdnZXIgZnJvbSAnQGZhc3RpZnkvc3dhZ2dlcic7XG5pbXBvcnQgc3dhZ2dlclVpIGZyb20gJ0BmYXN0aWZ5L3N3YWdnZXItdWknO1xuaW1wb3J0IG11bHRpcGFydCBmcm9tICdAZmFzdGlmeS9tdWx0aXBhcnQnO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XG5cbi8vIFJvdXRlIG1vZHVsZXNcbmltcG9ydCBzdGF0ZW1lbnRzUm91dGVzIGZyb20gJy4vYXBpL3N0YXRlbWVudHMuanMnO1xuaW1wb3J0IGpvYnNSb3V0ZXMgZnJvbSAnLi9hcGkvam9icy5qcyc7XG5cbmRvdGVudi5jb25maWcoKTtcblxuZnVuY3Rpb24gY3JlYXRlTG9nZ2VyKCkge1xuICBjb25zdCBpc1Byb2QgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuICBpZiAoaXNQcm9kKSByZXR1cm4gdHJ1ZTtcblxuICByZXR1cm4ge1xuICAgIHRyYW5zcG9ydDoge1xuICAgICAgdGFyZ2V0OiAncGluby1wcmV0dHknLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICB0cmFuc2xhdGVUaW1lOiAnU1lTOnN0YW5kYXJkJyxcbiAgICAgICAgaWdub3JlOiAncGlkLGhvc3RuYW1lJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSBhcyBjb25zdDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJ1aWxkU2VydmVyKCk6IFByb21pc2U8RmFzdGlmeUluc3RhbmNlPiB7XG4gIGNvbnN0IHNlcnZlcjogRmFzdGlmeUluc3RhbmNlID0gRmFzdGlmeSh7XG4gICAgbG9nZ2VyOiBjcmVhdGVMb2dnZXIoKSxcbiAgfSk7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLSBQbHVnaW5zIC0tLS0tLS0tLS0tLS0tLS1cbiAgYXdhaXQgc2VydmVyLnJlZ2lzdGVyKGhlbG1ldCk7XG4gIGF3YWl0IHNlcnZlci5yZWdpc3Rlcihjb29raWUsIHtcbiAgICBzZWNyZXQ6IHByb2Nlc3MuZW52LkNPT0tJRV9TRUNSRVQgfHwgJ3N1cGVyc2VjcmV0JyxcbiAgfSk7XG5cbiAgYXdhaXQgc2VydmVyLnJlZ2lzdGVyKGp3dCwge1xuICAgIHNlY3JldDogcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCB8fCAnY2hhbmdlbWUnLFxuICAgIHNpZ246IHsgZXhwaXJlc0luOiAnNjBtJyB9LFxuICAgIGNvb2tpZToge1xuICAgICAgY29va2llTmFtZTogJ3JlZnJlc2gnLFxuICAgICAgc2lnbmVkOiBmYWxzZSxcbiAgICB9LFxuICB9KTtcblxuICBhd2FpdCBzZXJ2ZXIucmVnaXN0ZXIoc3dhZ2dlciwge1xuICAgIG9wZW5hcGk6IHtcbiAgICAgIGluZm86IHsgdGl0bGU6ICdQb2NrZXQgRmluYW5jaWFsIEFkdmlzb3IgQVBJJywgdmVyc2lvbjogJzAuMS4wJyB9LFxuICAgIH0sXG4gIH0pO1xuXG4gIGF3YWl0IHNlcnZlci5yZWdpc3Rlcihzd2FnZ2VyVWksIHsgcm91dGVQcmVmaXg6ICcvZG9jcycgfSk7XG5cbiAgYXdhaXQgc2VydmVyLnJlZ2lzdGVyKG11bHRpcGFydCwge1xuICAgIGF0dGFjaEZpZWxkc1RvQm9keTogZmFsc2UsXG4gICAgbGltaXRzOiB7XG4gICAgICBmaWxlU2l6ZTogMTAgKiAxMDI0ICogMTAyNCwgLy8gMTBNQlxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0gU2NoZW1hcyAtLS0tLS0tLS0tLS0tLS0tXG4gIGNvbnN0IFN0YXR1c1NjaGVtYSA9IHtcbiAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBzdGF0dXM6IHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICB9LFxuICAgIHJlcXVpcmVkOiBbJ3N0YXR1cyddLFxuICB9IGFzIGNvbnN0O1xuXG4gIHNlcnZlci5nZXQoJy9oZWFsdGh6Jywge1xuICAgIHNjaGVtYToge1xuICAgICAgdGFnczogWydzeXN0ZW0nXSxcbiAgICAgIHJlc3BvbnNlOiB7IDIwMDogU3RhdHVzU2NoZW1hIH0sXG4gICAgfSxcbiAgfSwgYXN5bmMgKCkgPT4gKHsgc3RhdHVzOiAnb2snIH0pKTtcblxuICBzZXJ2ZXIuZ2V0KCcvcmVhZHl6Jywge1xuICAgIHNjaGVtYToge1xuICAgICAgdGFnczogWydzeXN0ZW0nXSxcbiAgICAgIHJlc3BvbnNlOiB7IDIwMDogU3RhdHVzU2NoZW1hIH0sXG4gICAgfSxcbiAgfSwgYXN5bmMgKCkgPT4gKHsgc3RhdHVzOiAncmVhZHknIH0pKTtcblxuICAvLyBBdXRoIHJvdXRlcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gVXNpbmcgWm9kIGZvciB0eXBlIGluZmVyZW5jZSBidXQgRmFzdGlmeSByb3V0ZXMgdXNlIEpTT04gU2NoZW1hIGZvciB2YWxpZGF0aW9uXG4gIGNvbnN0IFNpZ251cExvZ2luU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIGVtYWlsOiB6LnN0cmluZygpLmVtYWlsKCksXG4gICAgcGFzc3dvcmQ6IHouc3RyaW5nKCkubWluKDgpLm1heCgxMjgpLFxuICB9KTtcblxuICBjb25zdCBTaWdudXBMb2dpbkJvZHlTY2hlbWEgPSB7XG4gICAgdHlwZTogJ29iamVjdCcsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgZW1haWw6IHsgdHlwZTogJ3N0cmluZycsIGZvcm1hdDogJ2VtYWlsJyB9LFxuICAgICAgcGFzc3dvcmQ6IHsgdHlwZTogJ3N0cmluZycsIG1pbkxlbmd0aDogOCwgbWF4TGVuZ3RoOiAxMjggfSxcbiAgICB9LFxuICAgIHJlcXVpcmVkOiBbJ2VtYWlsJywgJ3Bhc3N3b3JkJ10sXG4gIH0gYXMgY29uc3Q7XG5cbiAgY29uc3QgVG9rZW5SZXNwb25zZVNjaGVtYSA9IHtcbiAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICB0b2tlbjogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgIH0sXG4gICAgcmVxdWlyZWQ6IFsndG9rZW4nXSxcbiAgfSBhcyBjb25zdDtcblxuICBzZXJ2ZXIucG9zdCgnL2FwaS92MS9hdXRoL3NpZ251cCcsIHtcbiAgICBzY2hlbWE6IHtcbiAgICAgIHRhZ3M6IFsnYXV0aCddLFxuICAgICAgYm9keTogU2lnbnVwTG9naW5Cb2R5U2NoZW1hLFxuICAgICAgcmVzcG9uc2U6IHsgMjAwOiBUb2tlblJlc3BvbnNlU2NoZW1hIH0sXG4gICAgICByZXF1aXJlZDogW10sXG4gICAgfSxcbiAgfSwgYXN5bmMgKHJlcXVlc3QsIHJlcGx5KSA9PiB7XG4gICAgY29uc3QgeyBlbWFpbCwgcGFzc3dvcmQgfSA9IHJlcXVlc3QuYm9keSBhcyB6LmluZmVyPHR5cGVvZiBTaWdudXBMb2dpblNjaGVtYT47XG5cbiAgICAvLyBUT0RPOiBQZXJzaXN0IHVzZXIgd2l0aCBQcmlzbWEsIGVuc3VyZSB1bmlxdWUgZW1haWxcbiAgICBjb25zdCB1c2VySWQgPSAnMSc7XG5cbiAgICBjb25zdCB0b2tlbiA9IHNlcnZlci5qd3Quc2lnbih7IHN1YjogdXNlcklkLCBlbWFpbCB9KTtcblxuICAgIHJlcGx5LnNldENvb2tpZSgncmVmcmVzaCcsIHRva2VuLCB7XG4gICAgICBwYXRoOiAnLycsXG4gICAgICBodHRwT25seTogdHJ1ZSxcbiAgICAgIHNhbWVTaXRlOiAnbGF4JyxcbiAgICAgIHNlY3VyZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyxcbiAgICAgIG1heEFnZTogNjAgKiA2MCxcbiAgICB9KTtcblxuICAgIHJldHVybiB7IHRva2VuIH07XG4gIH0pO1xuXG4gIHNlcnZlci5wb3N0KCcvYXBpL3YxL2F1dGgvbG9naW4nLCB7XG4gICAgc2NoZW1hOiB7XG4gICAgICB0YWdzOiBbJ2F1dGgnXSxcbiAgICAgIGJvZHk6IFNpZ251cExvZ2luQm9keVNjaGVtYSxcbiAgICAgIHJlc3BvbnNlOiB7IDIwMDogVG9rZW5SZXNwb25zZVNjaGVtYSB9LFxuICAgICAgcmVxdWlyZWQ6IFtdLFxuICAgIH0sXG4gIH0sIGFzeW5jIChyZXF1ZXN0LCByZXBseSkgPT4ge1xuICAgIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkIH0gPSByZXF1ZXN0LmJvZHkgYXMgei5pbmZlcjx0eXBlb2YgU2lnbnVwTG9naW5TY2hlbWE+O1xuXG4gICAgLy8gVE9ETzogVmVyaWZ5IGNyZWRlbnRpYWxzIHZpYSBQcmlzbWFcbiAgICBjb25zdCB1c2VySWQgPSAnMSc7XG5cbiAgICBjb25zdCB0b2tlbiA9IHNlcnZlci5qd3Quc2lnbih7IHN1YjogdXNlcklkLCBlbWFpbCB9KTtcblxuICAgIHJlcGx5LnNldENvb2tpZSgncmVmcmVzaCcsIHRva2VuLCB7XG4gICAgICBwYXRoOiAnLycsXG4gICAgICBodHRwT25seTogdHJ1ZSxcbiAgICAgIHNhbWVTaXRlOiAnbGF4JyxcbiAgICAgIHNlY3VyZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyxcbiAgICAgIG1heEFnZTogNjAgKiA2MCxcbiAgICB9KTtcblxuICAgIHJldHVybiB7IHRva2VuIH07XG4gIH0pO1xuXG4gIHNlcnZlci5nZXQoJy9hcGkvdjEvYXV0aC9tZScsIHtcbiAgICBwcmVIYW5kbGVyOiBbYXN5bmMgKHJlcXVlc3QsIHJlcGx5KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCByZXF1ZXN0Lmp3dFZlcmlmeSgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiByZXBseS5zZW5kKGVycik7XG4gICAgICB9XG4gICAgfV0sXG4gICAgc2NoZW1hOiB7XG4gICAgICB0YWdzOiBbJ2F1dGgnXSxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIDIwMDoge1xuICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHVzZXJJZDogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgICAgICAgZW1haWw6IHsgdHlwZTogJ3N0cmluZycsIGZvcm1hdDogJ2VtYWlsJyB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVxdWlyZWQ6IFsndXNlcklkJywgJ2VtYWlsJ10sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcmVxdWlyZWQ6IFtdLFxuICAgIH0sXG4gIH0sIGFzeW5jIChyZXF1ZXN0KSA9PiB7XG4gICAgY29uc3QgeyBzdWIsIGVtYWlsIH0gPSByZXF1ZXN0LnVzZXIgYXMgeyBzdWI6IHN0cmluZzsgZW1haWw6IHN0cmluZyB9O1xuICAgIHJldHVybiB7IHVzZXJJZDogc3ViLCBlbWFpbCB9O1xuICB9KTtcblxuICAvLyBEb21haW4gcm91dGVzXG4gIGF3YWl0IHNlcnZlci5yZWdpc3RlcihzdGF0ZW1lbnRzUm91dGVzKTtcbiAgYXdhaXQgc2VydmVyLnJlZ2lzdGVyKGpvYnNSb3V0ZXMpO1xuXG4gIHJldHVybiBzZXJ2ZXI7XG59XG5cbi8vIElmIG5vdCBpbiB0ZXN0IG1vZGUsIHN0YXJ0IHNlcnZlciBpbW1lZGlhdGVseVxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcpIHtcbiAgYnVpbGRTZXJ2ZXIoKS50aGVuKChzZXJ2ZXIpID0+IHtcbiAgICBjb25zdCBwb3J0ID0gcGFyc2VJbnQocHJvY2Vzcy5lbnYuUE9SVCB8fCAnMzAwMCcsIDEwKTtcbiAgICBzZXJ2ZXIubGlzdGVuKHsgcG9ydCwgaG9zdDogJzAuMC4wLjAnIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBzZXJ2ZXIubG9nLmVycm9yKGVycik7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgIH0pO1xuICB9KTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==