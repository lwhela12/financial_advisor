91e2ef34834fee71b7b6de253867f288
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.s3 = void 0;
exports.uploadStatement = uploadStatement;
const client_s3_1 = require("@aws-sdk/client-s3");
const lib_storage_1 = require("@aws-sdk/lib-storage");
const uuid_1 = require("uuid");
const date_fns_1 = require("date-fns");
const endpoint = process.env.S3_ENDPOINT;
const region = process.env.S3_REGION || 'us-east-1';
exports.s3 = new client_s3_1.S3Client({
    endpoint,
    region,
    credentials: {
        accessKeyId: process.env.S3_ACCESS_KEY || '',
        secretAccessKey: process.env.S3_SECRET_KEY || '',
    },
    forcePathStyle: !!endpoint,
});
async function uploadStatement(userId, file) {
    const datePrefix = (0, date_fns_1.format)(new Date(), 'yyyy/MM/dd');
    const extension = file.filename.split('.').pop() ?? '';
    const objectKey = `${userId}/${datePrefix}/${(0, uuid_1.v4)()}.${extension}`;
    const input = {
        Bucket: process.env.S3_BUCKET,
        Key: objectKey,
        Body: file.buffer,
        ContentType: file.mimetype,
        ContentLength: file.size,
        ACL: 'private',
    };
    // Use high-level Upload helper for multipart for >5MB
    const upload = new lib_storage_1.Upload({ client: exports.s3, params: input });
    await upload.done();
    return objectKey;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2x1Y2Fzd2hlbGFuL2ZpbmFuY2lhbF9hZHZpc29yL3NyYy9zZXJ2aWNlcy9zMy50cyIsIm1hcHBpbmdzIjoiOzs7QUFzQkEsMENBNEJDO0FBbERELGtEQUk0QjtBQUM1QixzREFBOEM7QUFDOUMsK0JBQW9DO0FBQ3BDLHVDQUFrQztBQUVsQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztBQUN6QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxXQUFXLENBQUM7QUFFdkMsUUFBQSxFQUFFLEdBQUcsSUFBSSxvQkFBUSxDQUFDO0lBQzdCLFFBQVE7SUFDUixNQUFNO0lBQ04sV0FBVyxFQUFFO1FBQ1gsV0FBVyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLEVBQUU7UUFDNUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxJQUFJLEVBQUU7S0FDakQ7SUFDRCxjQUFjLEVBQUUsQ0FBQyxDQUFDLFFBQVE7Q0FDM0IsQ0FBQyxDQUFDO0FBRUksS0FBSyxVQUFVLGVBQWUsQ0FDbkMsTUFBYyxFQUNkLElBS0M7SUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFBLGlCQUFNLEVBQUMsSUFBSSxJQUFJLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNwRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDdkQsTUFBTSxTQUFTLEdBQUcsR0FBRyxNQUFNLElBQUksVUFBVSxJQUFJLElBQUEsU0FBTSxHQUFFLElBQUksU0FBUyxFQUFFLENBQUM7SUFFckUsTUFBTSxLQUFLLEdBQTBCO1FBQ25DLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVM7UUFDN0IsR0FBRyxFQUFFLFNBQVM7UUFDZCxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU07UUFDakIsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRO1FBQzFCLGFBQWEsRUFBRSxJQUFJLENBQUMsSUFBSTtRQUN4QixHQUFHLEVBQUUsU0FBUztLQUNmLENBQUM7SUFFRixzREFBc0Q7SUFDdEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxvQkFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUV6RCxNQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVwQixPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWNhc3doZWxhbi9maW5hbmNpYWxfYWR2aXNvci9zcmMvc2VydmljZXMvczMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUzNDbGllbnQsXG4gIFB1dE9iamVjdENvbW1hbmQsXG4gIHR5cGUgUHV0T2JqZWN0Q29tbWFuZElucHV0LFxufSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuaW1wb3J0IHsgVXBsb2FkIH0gZnJvbSAnQGF3cy1zZGsvbGliLXN0b3JhZ2UnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tICdkYXRlLWZucyc7XG5cbmNvbnN0IGVuZHBvaW50ID0gcHJvY2Vzcy5lbnYuUzNfRU5EUE9JTlQ7XG5jb25zdCByZWdpb24gPSBwcm9jZXNzLmVudi5TM19SRUdJT04gfHwgJ3VzLWVhc3QtMSc7XG5cbmV4cG9ydCBjb25zdCBzMyA9IG5ldyBTM0NsaWVudCh7XG4gIGVuZHBvaW50LFxuICByZWdpb24sXG4gIGNyZWRlbnRpYWxzOiB7XG4gICAgYWNjZXNzS2V5SWQ6IHByb2Nlc3MuZW52LlMzX0FDQ0VTU19LRVkgfHwgJycsXG4gICAgc2VjcmV0QWNjZXNzS2V5OiBwcm9jZXNzLmVudi5TM19TRUNSRVRfS0VZIHx8ICcnLFxuICB9LFxuICBmb3JjZVBhdGhTdHlsZTogISFlbmRwb2ludCxcbn0pO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBsb2FkU3RhdGVtZW50KFxuICB1c2VySWQ6IHN0cmluZyxcbiAgZmlsZToge1xuICAgIGJ1ZmZlcjogQnVmZmVyO1xuICAgIGZpbGVuYW1lOiBzdHJpbmc7XG4gICAgbWltZXR5cGU6IHN0cmluZztcbiAgICBzaXplOiBudW1iZXI7XG4gIH0sXG4pIHtcbiAgY29uc3QgZGF0ZVByZWZpeCA9IGZvcm1hdChuZXcgRGF0ZSgpLCAneXl5eS9NTS9kZCcpO1xuICBjb25zdCBleHRlbnNpb24gPSBmaWxlLmZpbGVuYW1lLnNwbGl0KCcuJykucG9wKCkgPz8gJyc7XG4gIGNvbnN0IG9iamVjdEtleSA9IGAke3VzZXJJZH0vJHtkYXRlUHJlZml4fS8ke3V1aWR2NCgpfS4ke2V4dGVuc2lvbn1gO1xuXG4gIGNvbnN0IGlucHV0OiBQdXRPYmplY3RDb21tYW5kSW5wdXQgPSB7XG4gICAgQnVja2V0OiBwcm9jZXNzLmVudi5TM19CVUNLRVQsXG4gICAgS2V5OiBvYmplY3RLZXksXG4gICAgQm9keTogZmlsZS5idWZmZXIsXG4gICAgQ29udGVudFR5cGU6IGZpbGUubWltZXR5cGUsXG4gICAgQ29udGVudExlbmd0aDogZmlsZS5zaXplLFxuICAgIEFDTDogJ3ByaXZhdGUnLFxuICB9O1xuXG4gIC8vIFVzZSBoaWdoLWxldmVsIFVwbG9hZCBoZWxwZXIgZm9yIG11bHRpcGFydCBmb3IgPjVNQlxuICBjb25zdCB1cGxvYWQgPSBuZXcgVXBsb2FkKHsgY2xpZW50OiBzMywgcGFyYW1zOiBpbnB1dCB9KTtcblxuICBhd2FpdCB1cGxvYWQuZG9uZSgpO1xuXG4gIHJldHVybiBvYmplY3RLZXk7XG59XG4iXSwidmVyc2lvbiI6M30=