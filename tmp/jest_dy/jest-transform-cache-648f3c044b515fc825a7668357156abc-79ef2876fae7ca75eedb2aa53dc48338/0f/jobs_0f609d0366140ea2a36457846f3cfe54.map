{"file":"/Users/lucaswhelan/financial_advisor/src/api/jobs.ts","mappings":";;AAIA,6BA8BC;AAjCD,6BAAwB;AACxB,mDAAgD;AAEjC,KAAK,UAAU,UAAU,CAAC,MAAuB;IAC9D,MAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE;QAC7B,UAAU,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;gBACpC,IAAI,CAAC;oBACH,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC;gBAC5B,CAAC;gBAAC,OAAO,GAAG,EAAE,CAAC;oBACb,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;gBACpD,CAAC;YACH,CAAC,CAAC;QACF,MAAM,EAAE;YACN,MAAM,EAAE,OAAC,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,CAAC;YACpC,QAAQ,EAAE;gBACR,GAAG,EAAE,OAAC,CAAC,MAAM,CAAC;oBACZ,MAAM,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,YAAY,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;oBAChE,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;iBAC7B,CAAC;aACH;SACF;KACF,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QAC1B,MAAM,EAAE,EAAE,EAAE,GAAG,OAAO,CAAC,MAAwB,CAAC;QAEhD,MAAM,GAAG,GAAG,MAAM,mBAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC,CAAC;QAC5D,CAAC;QAED,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,QAAQ,EAAE,CAAC;QAEnC,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAY,EAAE,KAAK,EAAE,GAAG,CAAC,YAAY,IAAI,SAAS,EAAE,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;AACL,CAAC","names":[],"sources":["/Users/lucaswhelan/financial_advisor/src/api/jobs.ts"],"sourcesContent":["import type { FastifyInstance } from 'fastify';\nimport { z } from 'zod';\nimport { ocrQueue } from '../services/queue.js';\n\nexport default async function jobsRoutes(server: FastifyInstance) {\n  server.get('/api/v1/jobs/:id', {\n    preHandler: [async (request, reply) => {\n      try {\n        await request.jwtVerify();\n      } catch (err) {\n        reply.code(401).send({ message: 'Unauthorized' });\n      }\n    }],\n    schema: {\n      params: z.object({ id: z.string() }),\n      response: {\n        200: z.object({\n          status: z.enum(['pending', 'processing', 'succeeded', 'failed']),\n          error: z.string().optional(),\n        }),\n      },\n    },\n  }, async (request, reply) => {\n    const { id } = request.params as { id: string };\n\n    const job = await ocrQueue.getJob(id);\n    if (!job) {\n      return reply.code(404).send({ message: 'Job not found' });\n    }\n\n    const state = await job.getState();\n\n    return reply.send({ status: state as any, error: job.failedReason ?? undefined });\n  });\n}\n"],"version":3}