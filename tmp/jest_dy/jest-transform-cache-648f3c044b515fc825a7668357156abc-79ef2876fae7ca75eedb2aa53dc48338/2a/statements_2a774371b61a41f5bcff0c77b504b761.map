{"file":"/Users/lucaswhelan/financial_advisor/src/api/statements.ts","mappings":"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","names":[],"sources":["/Users/lucaswhelan/financial_advisor/src/api/statements.ts"],"sourcesContent":["import type { FastifyInstance } from 'fastify';\n\nimport { uploadStatement } from '../services/s3.js';\nimport { ocrQueue } from '../services/queue.js';\n\nexport default async function statementsRoutes(server: FastifyInstance) {\n\n\n  server.post('/api/v1/statements/upload', {\n    preHandler: [async (request, reply) => {\n      try {\n        await request.jwtVerify();\n      } catch (err) {\n        reply.code(401).send({ message: 'Unauthorized' });\n      }\n    }],\n    schema: {\n      consumes: ['multipart/form-data'],\n      response: {\n        202: {\n          type: 'object',\n          properties: {\n            jobId: { type: 'string' },\n          },\n          required: ['jobId'],\n        },\n      },\n      required: [],\n    },\n    // 10MB file limit\n    onRequest: async (request, reply) => {\n      if (!request.isMultipart()) {\n        reply.code(400).send({ message: 'Expected multipart/form-data' });\n      }\n    },\n  }, async (request, reply) => {\n    const user = request.user as { sub: string };\n\n    const parts = request.parts();\n    const part = await parts.next();\n    if (!part || part.done || !part.value) {\n      return reply.code(400).send({ message: 'File not provided' });\n    }\n\n    const file = part.value;\n\n    if (file.type !== 'file') {\n      return reply.code(400).send({ message: 'Invalid multipart field' });\n    }\n\n    const allowed = ['application/pdf', 'image/jpeg', 'image/png'];\n    if (!allowed.includes(file.mimetype)) {\n      return reply.code(400).send({ message: 'Unsupported mime type' });\n    }\n\n    const buffer = await file.toBuffer();\n\n    if (buffer.length > 10 * 1024 * 1024) {\n      return reply.code(400).send({ message: 'File exceeds 10MB limit' });\n    }\n\n    const objectKey = await uploadStatement(user.sub, {\n      buffer,\n      filename: file.filename,\n      mimetype: file.mimetype,\n      size: buffer.length,\n    });\n\n    const job = await ocrQueue.add('parse-statement', {\n      userId: user.sub,\n      s3Key: objectKey,\n    });\n\n    reply.code(202).send({ jobId: job.id });\n  });\n}\n"],"version":3}